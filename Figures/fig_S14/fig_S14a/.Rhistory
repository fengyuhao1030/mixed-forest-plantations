157+7/60+46.78/3600
35+12/60
71+6/60
64+3/60
20+22/60
54+19/60
35/60
51+37/60
3+37/60
51+36/60
3+45/60
5/60
34/60
43+13/60+9/3600
142+22/60+53/3600
106+39/60+50/3600
21+57/60+47/3600
108+18/60+47/3600
22+37/60+57/3600
A <- c(3.3,3.2,3.4)
mean(A)
sd(A)
B <- c(3.2,3.4,3.3)
mean(B)
sd(B)
C <- c(3.2,3.4,3.5)
mean(C)
sd(C)
A <- c(2.9,3.0,2.9)
mean(A)
sd(A)
B <- c(2.9,3.2,3.0)
mean(B)
sd(B)
C <- c(3.4,3.3,3.4)
mean(C)
sd(C)
install.packages("nlme")
21+43/60+35.7/3600
105+6/60+47.1/3600
22+10/60
106+50/60
57+7/60
4+45/60
54+15/60
0.5
108+8/60
34.49
34+49/60
26+11/60+30/3600
117+26/60
load('C:\\Users\\erbao\\Desktop\\Figures\\Fig_2\\Fig_2a\\Species level\\HeightData')
load('C:\\Users\\erbao\\Desktop\\Figures\\Fig_2\\Fig_2a\\Species level\\HeightData.R')
View(HeightData)
13/60
47/60
9/2*sqrt(3)
10000/7.794
9/2*sqrt(3)*81
28/60
-29/60
2/60
1/60
49/60
44/60
46/60
59/60
19/60+30/3600
30/60
38/60
61+42/60
21+58/60
53+14/60
4+1/60
29+7/60+27/3600
117+54/60+31/3600
50+47/60
10+13/60
42/60
58/60
22+31/60
114+5/60
25+40/60+7/3600
101+51/60+31/3600
22+2/60+58/3600
106+52/60+8/3600
install.packages("devtools")
install.packages("nlme")
install.packages("multcomp")
exp(1.6)
exp(0.6)
exp(0.6)
exp(0.3)
exp(0.2)
rm(list = ls())
library(metafor)
library(ggplot2)
setwd('C:\\Users\\erbao\\Desktop\\Figures_0106\\Fig_R3\\Fig_R3a')
##==== Function ====##
theme_custom <- function(){
myTheme <- theme(panel.background = element_rect(fill = 'white',color = 'black',size = 0.5),
panel.grid = element_blank(),
legend.position = 'none',
plot.margin = margin(6,6,6,6),
plot.background = element_blank(),
axis.ticks = element_line(size = 0.3),
axis.ticks.length = unit(-0.15,'lines'),
axis.title.y = element_blank(),
axis.title.x = element_text(size = 7,margin = margin(2,0,0,0),face = 'bold'),
axis.text.y = element_text(size = 7,margin = margin(0,3,0,0),color = '#000000'),
axis.text.x = element_text(size = 7,margin = margin(4,0,0,0),color = '#000000'))
return(myTheme)
}
CMYKtoRGB <- function(C,M,Y,K){
Rc <- (1-C)*(1-K)
Gc <- (1-M)*(1-K)
Bc <- (1-Y)*(1-K)
R <- as.character(as.hexmode((ceiling(Rc*255))))
G <- as.character(as.hexmode((ceiling(Gc*255))))
B <- as.character(as.hexmode((ceiling(Bc*255))))
if(nchar(R) == 1){
R <- paste0('0',R)
}
if(nchar(G) == 1){
G <- paste0('0',G)
}
if(nchar(B) == 1){
B <- paste0('0',B)
}
RGBColor <- paste0('#',R,G,B)
return(RGBColor)
}
##==== Function ====##
load('HeightData.R')
dataMatrix <- get('HeightData')
##==== Part 1: Collate data ====##
dataMatrix$BubbleSize <- 0
Weight <- 1/sqrt(dataMatrix$vi)
Breaks <- quantile(Weight,c(0.2,0.4,0.6,0.8,1))
selectIDs <- which(Weight < Breaks[1])
dataMatrix$BubbleSize <- 0.4
for(i in seq(2,length(Breaks))){
selectIDs <- which((Weight < Breaks[i])&(Weight >= Breaks[i-1]))
dataMatrix$BubbleSize[selectIDs] <- 0.4 + (i-1)*0.4
}
selectIDs <- which((dataMatrix$yi <= quantile(dataMatrix$yi,0.98))&(dataMatrix$yi >= quantile(dataMatrix$yi,0.02)))
newDataMatrix <- dataMatrix[selectIDs,c('Age','Density','AridityIndex','TEM','PRE','PlotSize','yi','BubbleSize')]
dataMatrix$Level4 <- as.factor(paste(dataMatrix$Lat,dataMatrix$Lon))
dataMatrix$Level3 <- as.factor(paste(dataMatrix$Composition,dataMatrix$Age,dataMatrix$Density))
dataMatrix$Level2 <- as.factor(dataMatrix$Species)
dataMatrix$Level1 <- as.factor(seq(1,nrow(dataMatrix)))
##==== Part 1: Collate data ====##
##==== Part 2: Fit TEM ====##
res <- rma.mv(yi,vi,mods = ~TEM,random = ~1|Level4/Level3/Level2/Level1,method = 'ML',data = dataMatrix)
# Fit line
temLine <- as.data.frame(matrix(data = 0,nrow = 100,ncol = 4))
colnames(temLine) <- c('X','Y','Upper','Lower')
tempX <- seq(min(dataMatrix$TEM),max(dataMatrix$TEM),length.out = 100)
for(i in seq(1,length(tempX))){
temLine[i,1] <- tempX[i]
tempResult <- predict.rma(res,newmods = tempX[i])
temLine[i,2] <- as.numeric(tempResult$pred)
temLine[i,3] <- as.numeric(tempResult$ci.ub)
temLine[i,4] <- as.numeric(tempResult$ci.lb)
}
# CI polygon
temCIPolygon <- as.data.frame(matrix(data = 0,nrow = (2*nrow(temLine)+1),ncol = 2))
colnames(temCIPolygon) <- c('X','Y')
count <- 1
for(i in seq(1,nrow(temLine))){
temCIPolygon$X[count] <- temLine$X[i]
temCIPolygon$Y[count] <- temLine$Upper[i]
count <- count + 1
}
for(i in seq(nrow(temLine),1,-1)){
temCIPolygon$X[count] <- temLine$X[i]
temCIPolygon$Y[count] <- temLine$Lower[i]
count <- count + 1
}
temCIPolygon$X[count] <- temLine$X[1]
temCIPolygon$Y[count] <- temLine$Upper[1]
##==== Part 2: Fit TEM ====##
##==== Part 3: Draw ====##
Fig_R3a <- ggplot()+
geom_point(newDataMatrix,mapping = aes(x = TEM,y = yi),
shape = 20,stroke = 0,color = '#666666',size = newDataMatrix$BubbleSize,alpha = 0.4)+
geom_hline(yintercept = 0,size = 0.3,color = '#000000',linetype = 'dashed')+
geom_line(data = temLine,mapping = aes(x = X,y = Y),size = 0.5,color = CMYKtoRGB(0.84,0.67,0,0))+
geom_polygon(data = temCIPolygon,mapping = aes(x = X,y = Y),size = 0.5,fill = CMYKtoRGB(0.84,0.67,0,0),alpha = 0.3)+
scale_x_continuous(breaks = seq(5,25,5),labels = c('5','10','15','20','25'))+
scale_y_continuous(limits = c(-0.6,0.6),breaks = seq(-0.6,0.6,0.3),labels = c('-0.6','-0.3','0','0.3','0.6'),expand = c(0,0))+
xlab('TEM')+
theme_custom()
pdf(file = 'C:\\Users\\erbao\\Desktop\\Figures_0106\\Fig_R3\\Fig_R3a\\Fig_R3a.pdf',width = 1.55,height = 1.46,colormodel = 'cmyk')
print(Fig_R3a)
dev.off()
##==== Part 3: Draw ====##
rm(list = ls())
library(metafor)
library(ggplot2)
setwd('C:\\Users\\erbao\\Desktop\\Figures_0110\\Fig_S9')
##==== Function ====##
theme_custom <- function(){
myTheme <- theme(panel.background = element_rect(fill = 'white',color = 'black',size = 0.5),
panel.grid = element_blank(),
legend.position = 'none',
plot.margin = margin(6,6,6,6),
plot.background = element_blank(),
axis.ticks = element_line(size = 0.3),
axis.ticks.length = unit(-0.15,'lines'),
axis.title.y = element_blank(),
axis.title.x = element_text(size = 7,margin = margin(2,0,0,0),face = 'bold'),
axis.text.y = element_text(size = 7,margin = margin(0,3,0,0),color = '#000000'),
axis.text.x = element_text(size = 7,margin = margin(4,0,0,0),color = '#000000'))
return(myTheme)
}
CMYKtoRGB <- function(C,M,Y,K){
Rc <- (1-C)*(1-K)
Gc <- (1-M)*(1-K)
Bc <- (1-Y)*(1-K)
R <- as.character(as.hexmode((ceiling(Rc*255))))
G <- as.character(as.hexmode((ceiling(Gc*255))))
B <- as.character(as.hexmode((ceiling(Bc*255))))
if(nchar(R) == 1){
R <- paste0('0',R)
}
if(nchar(G) == 1){
G <- paste0('0',G)
}
if(nchar(B) == 1){
B <- paste0('0',B)
}
RGBColor <- paste0('#',R,G,B)
return(RGBColor)
}
##==== Function ====##
load('HeightData.R')
dataMatrix <- get('HeightData')
##==== Part 1: Collate data ====##
dataMatrix$BubbleSize <- 0
Weight <- 1/sqrt(dataMatrix$vi)
Breaks <- quantile(Weight,c(0.2,0.4,0.6,0.8,1))
selectIDs <- which(Weight < Breaks[1])
dataMatrix$BubbleSize <- 0.4
for(i in seq(2,length(Breaks))){
selectIDs <- which((Weight < Breaks[i])&(Weight >= Breaks[i-1]))
dataMatrix$BubbleSize[selectIDs] <- 0.4 + (i-1)*0.4
}
selectIDs <- which((dataMatrix$yi <= quantile(dataMatrix$yi,0.98))&(dataMatrix$yi >= quantile(dataMatrix$yi,0.02)))
newDataMatrix <- dataMatrix[selectIDs,c('Age','Density','AridityIndex','TEM','PRE','PlotSize','yi','BubbleSize')]
dataMatrix$Level4 <- as.factor(paste(dataMatrix$Lat,dataMatrix$Lon))
dataMatrix$Level3 <- as.factor(paste(dataMatrix$Composition,dataMatrix$Age,dataMatrix$Density))
dataMatrix$Level2 <- as.factor(dataMatrix$Species)
dataMatrix$Level1 <- as.factor(seq(1,nrow(dataMatrix)))
##==== Part 1: Collate data ====##
##==== Part 2: Fit TEM ====##
res <- rma.mv(yi,vi,mods = ~TEM,random = ~1|Level4/Level3/Level2/Level1,method = 'ML',data = dataMatrix)
# Fit line
temLine <- as.data.frame(matrix(data = 0,nrow = 100,ncol = 4))
colnames(temLine) <- c('X','Y','Upper','Lower')
tempX <- seq(min(dataMatrix$TEM),max(dataMatrix$TEM),length.out = 100)
for(i in seq(1,length(tempX))){
temLine[i,1] <- tempX[i]
tempResult <- predict.rma(res,newmods = tempX[i])
temLine[i,2] <- as.numeric(tempResult$pred)
temLine[i,3] <- as.numeric(tempResult$ci.ub)
temLine[i,4] <- as.numeric(tempResult$ci.lb)
}
# CI polygon
temCIPolygon <- as.data.frame(matrix(data = 0,nrow = (2*nrow(temLine)+1),ncol = 2))
colnames(temCIPolygon) <- c('X','Y')
count <- 1
for(i in seq(1,nrow(temLine))){
temCIPolygon$X[count] <- temLine$X[i]
temCIPolygon$Y[count] <- temLine$Upper[i]
count <- count + 1
}
for(i in seq(nrow(temLine),1,-1)){
temCIPolygon$X[count] <- temLine$X[i]
temCIPolygon$Y[count] <- temLine$Lower[i]
count <- count + 1
}
temCIPolygon$X[count] <- temLine$X[1]
temCIPolygon$Y[count] <- temLine$Upper[1]
##==== Part 2: Fit TEM ====##
##==== Part 3: Draw ====##
Fig_S9a <- ggplot()+
geom_point(newDataMatrix,mapping = aes(x = TEM,y = yi),
shape = 20,stroke = 0,color = '#666666',size = newDataMatrix$BubbleSize,alpha = 0.4)+
geom_hline(yintercept = 0,size = 0.3,color = '#000000',linetype = 'dashed')+
geom_line(data = temLine,mapping = aes(x = X,y = Y),size = 0.5,color = CMYKtoRGB(0.84,0.67,0,0))+
geom_polygon(data = temCIPolygon,mapping = aes(x = X,y = Y),size = 0.5,fill = CMYKtoRGB(0.84,0.67,0,0),alpha = 0.3)+
scale_x_continuous(breaks = seq(5,25,5),labels = c('5','10','15','20','25'))+
scale_y_continuous(limits = c(-0.6,0.6),breaks = seq(-0.6,0.6,0.3),labels = c('-0.6','-0.3','0','0.3','0.6'),expand = c(0,0))+
xlab('TEM')+
theme_custom()
pdf(file = 'C:\\Users\\erbao\\Desktop\\Figures_0110\\Fig_S9\\Fig_S9a.pdf',width = 1.55,height = 1.46,colormodel = 'cmyk')
print(Fig_S9a)
dev.off()
##==== Part 3: Draw ====##
rm(list = ls())
library(metafor)
library(ggplot2)
setwd('C:\\Users\\erbao\\Desktop\\Figures_0110\\Fig_S9\\Fig_S9a')
##==== Function ====##
theme_custom <- function(){
myTheme <- theme(panel.background = element_rect(fill = 'white',color = 'black',size = 0.5),
panel.grid = element_blank(),
legend.position = 'none',
plot.margin = margin(6,6,6,6),
plot.background = element_blank(),
axis.ticks = element_line(size = 0.3),
axis.ticks.length = unit(-0.15,'lines'),
axis.title.y = element_blank(),
axis.title.x = element_text(size = 7,margin = margin(2,0,0,0),face = 'bold'),
axis.text.y = element_text(size = 7,margin = margin(0,3,0,0),color = '#000000'),
axis.text.x = element_text(size = 7,margin = margin(4,0,0,0),color = '#000000'))
return(myTheme)
}
CMYKtoRGB <- function(C,M,Y,K){
Rc <- (1-C)*(1-K)
Gc <- (1-M)*(1-K)
Bc <- (1-Y)*(1-K)
R <- as.character(as.hexmode((ceiling(Rc*255))))
G <- as.character(as.hexmode((ceiling(Gc*255))))
B <- as.character(as.hexmode((ceiling(Bc*255))))
if(nchar(R) == 1){
R <- paste0('0',R)
}
if(nchar(G) == 1){
G <- paste0('0',G)
}
if(nchar(B) == 1){
B <- paste0('0',B)
}
RGBColor <- paste0('#',R,G,B)
return(RGBColor)
}
##==== Function ====##
load('HeightData.R')
dataMatrix <- get('HeightData')
##==== Part 1: Collate data ====##
dataMatrix$BubbleSize <- 0
Weight <- 1/sqrt(dataMatrix$vi)
Breaks <- quantile(Weight,c(0.2,0.4,0.6,0.8,1))
selectIDs <- which(Weight < Breaks[1])
dataMatrix$BubbleSize <- 0.4
for(i in seq(2,length(Breaks))){
selectIDs <- which((Weight < Breaks[i])&(Weight >= Breaks[i-1]))
dataMatrix$BubbleSize[selectIDs] <- 0.4 + (i-1)*0.4
}
selectIDs <- which((dataMatrix$yi <= quantile(dataMatrix$yi,0.98))&(dataMatrix$yi >= quantile(dataMatrix$yi,0.02)))
newDataMatrix <- dataMatrix[selectIDs,c('Age','Density','AridityIndex','TEM','PRE','PlotSize','yi','BubbleSize')]
dataMatrix$Level4 <- as.factor(paste(dataMatrix$Lat,dataMatrix$Lon))
dataMatrix$Level3 <- as.factor(paste(dataMatrix$Composition,dataMatrix$Age,dataMatrix$Density))
dataMatrix$Level2 <- as.factor(dataMatrix$Species)
dataMatrix$Level1 <- as.factor(seq(1,nrow(dataMatrix)))
##==== Part 1: Collate data ====##
##==== Part 2: Fit TEM ====##
res <- rma.mv(yi,vi,mods = ~TEM,random = ~1|Level4/Level3/Level2/Level1,method = 'ML',data = dataMatrix)
# Fit line
temLine <- as.data.frame(matrix(data = 0,nrow = 100,ncol = 4))
colnames(temLine) <- c('X','Y','Upper','Lower')
tempX <- seq(min(dataMatrix$TEM),max(dataMatrix$TEM),length.out = 100)
for(i in seq(1,length(tempX))){
temLine[i,1] <- tempX[i]
tempResult <- predict.rma(res,newmods = tempX[i])
temLine[i,2] <- as.numeric(tempResult$pred)
temLine[i,3] <- as.numeric(tempResult$ci.ub)
temLine[i,4] <- as.numeric(tempResult$ci.lb)
}
# CI polygon
temCIPolygon <- as.data.frame(matrix(data = 0,nrow = (2*nrow(temLine)+1),ncol = 2))
colnames(temCIPolygon) <- c('X','Y')
count <- 1
for(i in seq(1,nrow(temLine))){
temCIPolygon$X[count] <- temLine$X[i]
temCIPolygon$Y[count] <- temLine$Upper[i]
count <- count + 1
}
for(i in seq(nrow(temLine),1,-1)){
temCIPolygon$X[count] <- temLine$X[i]
temCIPolygon$Y[count] <- temLine$Lower[i]
count <- count + 1
}
temCIPolygon$X[count] <- temLine$X[1]
temCIPolygon$Y[count] <- temLine$Upper[1]
##==== Part 2: Fit TEM ====##
##==== Part 3: Draw ====##
Fig_S9a <- ggplot()+
geom_point(newDataMatrix,mapping = aes(x = TEM,y = yi),
shape = 20,stroke = 0,color = '#666666',size = newDataMatrix$BubbleSize,alpha = 0.4)+
geom_hline(yintercept = 0,size = 0.3,color = '#000000',linetype = 'dashed')+
geom_line(data = temLine,mapping = aes(x = X,y = Y),size = 0.5,color = CMYKtoRGB(0.84,0.67,0,0))+
geom_polygon(data = temCIPolygon,mapping = aes(x = X,y = Y),size = 0.5,fill = CMYKtoRGB(0.84,0.67,0,0),alpha = 0.3)+
scale_x_continuous(breaks = seq(5,25,5),labels = c('5','10','15','20','25'))+
scale_y_continuous(limits = c(-0.6,0.6),breaks = seq(-0.6,0.6,0.3),labels = c('-0.6','-0.3','0','0.3','0.6'),expand = c(0,0))+
xlab('TEM')+
theme_custom()
pdf(file = 'C:\\Users\\erbao\\Desktop\\Figures_0110\\Fig_S9\\Fig_S9a\\Fig_S9a.pdf',width = 1.55,height = 1.46,colormodel = 'cmyk')
print(Fig_S9a)
dev.off()
##==== Part 3: Draw ====##
rm(list = ls())
library(rstudioapi)
library(multcomp)
library(metafor)
library(ggplot2)
currentPath <- getSourceEditorContext()$path
charLocations <- gregexpr('/',currentPath)[[1]]
currentPath <- substring(currentPath,1,charLocations[length(charLocations)]-1)
setwd(currentPath)
##==== Function ====##
theme_custom <- function(){
myTheme <- theme(panel.background = element_rect(fill = 'white',color = 'black',size = 0.5),
panel.grid = element_blank(),
legend.position = 'none',
plot.margin = margin(6,6,6,6),
plot.background = element_blank(),
axis.ticks = element_line(size = 0.3),
axis.ticks.length = unit(-0.15,'lines'),
axis.title.y = element_blank(),
axis.title.x = element_text(size = 7,margin = margin(2,0,0,0),face = 'bold'),
axis.text.y = element_text(size = 7,margin = margin(0,3,0,0),color = '#000000'),
axis.text.x = element_text(size = 7,margin = margin(4,0,0,0),color = '#000000'))
return(myTheme)
}
CMYKtoRGB <- function(C,M,Y,K){
Rc <- (1-C)*(1-K)
Gc <- (1-M)*(1-K)
Bc <- (1-Y)*(1-K)
R <- as.character(as.hexmode((ceiling(Rc*255))))
G <- as.character(as.hexmode((ceiling(Gc*255))))
B <- as.character(as.hexmode((ceiling(Bc*255))))
if(nchar(R) == 1){
R <- paste0('0',R)
}
if(nchar(G) == 1){
G <- paste0('0',G)
}
if(nchar(B) == 1){
B <- paste0('0',B)
}
RGBColor <- paste0('#',R,G,B)
return(RGBColor)
}
##==== Function ====##
load('HeightData.R')
dataMatrix <- get('HeightData')
##==== Part 1: Collate data ====##
dataMatrix$BubbleSize <- 0
Weight <- 1/sqrt(dataMatrix$vi)
Breaks <- quantile(Weight,c(0.2,0.4,0.6,0.8,1))
selectIDs <- which(Weight < Breaks[1])
dataMatrix$BubbleSize <- 0.4
for(i in seq(2,length(Breaks))){
selectIDs <- which((Weight < Breaks[i])&(Weight >= Breaks[i-1]))
dataMatrix$BubbleSize[selectIDs] <- 0.4 + (i-1)*0.4
}
selectIDs <- which((dataMatrix$yi <= quantile(dataMatrix$yi,0.98))&(dataMatrix$yi >= quantile(dataMatrix$yi,0.02)))
newDataMatrix <- dataMatrix[selectIDs,c('Age','Density','AridityIndex','TEM','PRE','PlotSize','yi','BubbleSize')]
dataMatrix$Level4 <- as.factor(paste(dataMatrix$Lat,dataMatrix$Lon))
dataMatrix$Level3 <- as.factor(paste(dataMatrix$Composition,dataMatrix$Age,dataMatrix$Density))
dataMatrix$Level2 <- as.factor(dataMatrix$Species)
dataMatrix$Level1 <- as.factor(seq(1,nrow(dataMatrix)))
##==== Part 1: Collate data ====##
##==== Part 2: Fit TEM ====##
res <- rma.mv(yi,vi,mods = ~TEM,random = ~1|Level4/Level3/Level2/Level1,method = 'ML',data = dataMatrix)
# Fit line
temLine <- as.data.frame(matrix(data = 0,nrow = 100,ncol = 4))
colnames(temLine) <- c('X','Y','Upper','Lower')
tempX <- seq(min(dataMatrix$TEM),max(dataMatrix$TEM),length.out = 100)
for(i in seq(1,length(tempX))){
temLine[i,1] <- tempX[i]
tempResult <- predict.rma(res,newmods = tempX[i])
temLine[i,2] <- as.numeric(tempResult$pred)
temLine[i,3] <- as.numeric(tempResult$ci.ub)
temLine[i,4] <- as.numeric(tempResult$ci.lb)
}
# CI polygon
temCIPolygon <- as.data.frame(matrix(data = 0,nrow = (2*nrow(temLine)+1),ncol = 2))
colnames(temCIPolygon) <- c('X','Y')
count <- 1
for(i in seq(1,nrow(temLine))){
temCIPolygon$X[count] <- temLine$X[i]
temCIPolygon$Y[count] <- temLine$Upper[i]
count <- count + 1
}
for(i in seq(nrow(temLine),1,-1)){
temCIPolygon$X[count] <- temLine$X[i]
temCIPolygon$Y[count] <- temLine$Lower[i]
count <- count + 1
}
temCIPolygon$X[count] <- temLine$X[1]
temCIPolygon$Y[count] <- temLine$Upper[1]
##==== Part 2: Fit TEM ====##
##==== Part 3: Draw ====##
fig_S10a <- ggplot()+
geom_point(newDataMatrix,mapping = aes(x = TEM,y = yi),
shape = 20,stroke = 0,color = '#666666',size = newDataMatrix$BubbleSize,alpha = 0.4)+
geom_hline(yintercept = 0,size = 0.3,color = '#000000',linetype = 'dashed')+
geom_line(data = temLine,mapping = aes(x = X,y = Y),size = 0.5,color = CMYKtoRGB(0.84,0.67,0,0))+
geom_polygon(data = temCIPolygon,mapping = aes(x = X,y = Y),size = 0.5,fill = CMYKtoRGB(0.84,0.67,0,0),alpha = 0.3)+
scale_x_continuous(breaks = seq(5,25,5),labels = c('5','10','15','20','25'))+
scale_y_continuous(limits = c(-0.6,0.6),breaks = seq(-0.6,0.6,0.3),labels = c('-0.6','-0.3','0','0.3','0.6'),expand = c(0,0))+
xlab('TEM')+
theme_custom()
outputFileName <- paste0(currentPath,'/fig_S10a.pdf')
pdf(file = outputFileName,width = 1.55,height = 1.46,colormodel = 'cmyk')
print(fig_S10a)
dev.off()
##==== Part 3: Draw ====##
